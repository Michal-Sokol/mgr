import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go


def run(df):
    st.title("\U0001F4CA Analiza Konsumencka")

    # Formatowanie daty dla osi czasu (W1 i W5)
    df['miesiąc'] = pd.to_datetime(df['miesiąc'], format="%d.%m.%Y")

    # Wymuszona kolejność grup wiekowych
    wiek_order = ["<20", "20-30", "30-40", "40-50", "50-60", "60-70", ">70"]
    df['przedział_wiekowy'] = pd.Categorical(df['przedział_wiekowy'], categories=wiek_order, ordered=True)

    # Layout w dwóch kolumnach 2x3
    col1, col2 = st.columns(2)

    # W1: Miesięczny przychód
    with col1:
        st.subheader("W1: Miesięczny Przychód")
        monthly = df.groupby('miesiąc')['suma'].sum().sort_index()

        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=monthly.index,
            y=monthly.values,
            mode='lines+markers+text',
            name='Przychód miesięczny',
            line=dict(color='mediumorchid', width=3),
            text=[f"{val/1e6:.1f}M" for val in monthly.values],
            textposition="top center"
        ))

        fig.update_layout(
            title="\U0001F4C8 Miesięczny przychód (suma)",
            xaxis_title="Miesiąc",
            yaxis_title="Przychód",
            xaxis=dict(tickformat="%b %Y"),
            height=500,
            hovermode="x unified",
            margin=dict(t=50, b=50, l=30, r=30),
        )

        st.plotly_chart(fig, use_container_width=True)

    # W4: Udział grup wiekowych w przychodach
    with col2:
        st.subheader("W4: Przychód wg grup wiekowych")
        age = df.groupby('przedział_wiekowy')['suma'].sum().reindex(wiek_order)

        fig4 = px.bar(
            x=age.index,
            y=age.values,
            text=[f"{v/1e6:.1f}M" for v in age.values],
            title="\U0001F4CA Przychód z podziałem na grupy wiekowe"
        )
        fig4.update_traces(marker_color='lightskyblue', textposition='outside')
        fig4.update_layout(
            xaxis_title="Grupa wiekowa",
            yaxis_title="Przychód",
            height=500,
            margin=dict(t=50, b=50, l=30, r=30)
        )

        st.plotly_chart(fig4, use_container_width=True)

    # Nowy wiersz — kolumny na kolejne wykresy
    col3, col4 = st.columns(2)

    # W2: Procentowy udział regionów w przychodach
    with col3:
        st.subheader("W2: Przychód wg regionu [%]")
        regional = df.groupby('region')['suma'].sum().sort_values(ascending=False)

        fig2 = px.pie(
            names=regional.index,
            values=regional.values,
            hole=0.4,
            title="Udział procentowy przychodów wg regionu"
        )
        fig2.update_traces(
            textinfo='percent+label',
            pull=[0.05] * len(regional),
            marker=dict(line=dict(color="#000000", width=1))
        )
        fig2.update_layout(height=500)

        st.plotly_chart(fig2, use_container_width=True)

    # W5: Średnia suma zamówień miesięcznie
    with col4:
        st.subheader("W5: Średnia suma zamówień")
        avg_sum = df.groupby('miesiąc')['średnia suma'].mean().sort_index()

        fig5 = go.Figure()
        fig5.add_trace(go.Scatter(
            x=avg_sum.index,
            y=avg_sum.values,
            mode='lines+markers+text',
            name='Średnia suma',
            line=dict(color='mediumvioletred', width=3),
            text=[f"{val:.0f}" for val in avg_sum.values],
            textposition='top center'
        ))

        fig5.update_layout(
            title="\U0001F4C8 Średnia suma zamówień miesięcznie",
            xaxis_title="Miesiąc",
            yaxis_title="Średnia suma",
            xaxis=dict(tickformat="%b %Y"),
            height=500,
            hovermode="x unified",
            margin=dict(t=50, b=50, l=30, r=30),
        )

        st.plotly_chart(fig5, use_container_width=True)

    # Trzeci wiersz — kolumny na kolejne wykresy
    col5, col6 = st.columns(2)

    # W3: TOP 7 dostawców płatności
    with col5:
        st.subheader("W3: TOP 7 dostawców płatności")
        top7 = df.groupby('metoda_płatności')['suma'].sum().nlargest(7)

        fig3 = px.pie(
            names=top7.index,
            values=top7.values,
            title="Udział 7 największych dostawców płatności",
            hole=0.3
        )
        fig3.update_traces(textinfo='percent+label')
        fig3.update_layout(height=500)

        st.plotly_chart(fig3, use_container_width=True)

    # W6: Przychód wg kategorii i płci
    # W6: Przychód wg kategorii i płci
# W6: Przychód wg kategorii i płci — wykres motylkowy
    with col6:
        st.subheader("W6: Przychód wg kategorii i płci")
        st.markdown("**W6: Przychód wg kategorii i płci (wykres motylkowy)**")

        # Grupowanie danych
        grouped = df.groupby(['kategoria', 'płeć'])['suma'].sum().unstack().fillna(0)

        # Sprawdzenie obecności danych
        if 'Kobiety' in grouped.columns and 'Mężczyźni' in grouped.columns:
            grouped['Kobiety'] = -grouped['Kobiety']  # negatywne wartości po lewej stronie
            grouped = grouped.loc[(grouped['Kobiety'] != 0) | (grouped['Mężczyźni'] != 0)]

            # Sortowanie wg sumy absolutnych przychodów
            grouped['suma'] = grouped[['Kobiety', 'Mężczyźni']].abs().sum(axis=1)
            grouped = grouped.sort_values(by='suma', ascending=False)
            grouped = grouped.drop(columns='suma')

            # Tworzenie wykresu motylkowego
            fig6 = go.Figure()

            fig6.add_trace(go.Bar(
                y=grouped.index,
                x=grouped['Kobiety'],
                name='Kobiety',
                orientation='h',
                marker_color='lightpink',
                text=[f"{abs(v)/1e6:.1f}M" for v in grouped['Kobiety']],
                textposition='inside'
            ))

            fig6.add_trace(go.Bar(
                y=grouped.index,
                x=grouped['Mężczyźni'],
                name='Mężczyźni',
                orientation='h',
                marker_color='cornflowerblue',
                text=[f"{v/1e6:.1f}M" for v in grouped['Mężczyźni']],
                textposition='inside'
            ))

            fig6.update_layout(
                barmode='relative',
                xaxis_title="Przychód",
                yaxis_title="Kategoria",
                xaxis=dict(tickvals=[-50e6, -25e6, 0, 25e6, 50e6],
                        ticktext=["50M", "25M", "0", "25M", "50M"]),
                height=600,
                margin=dict(t=60, b=40, l=120, r=40),
                legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="center", x=0.5)
            )

            st.plotly_chart(fig6, use_container_width=True)

        else:
            st.warning("Brakuje danych dla jednej z płci.")


